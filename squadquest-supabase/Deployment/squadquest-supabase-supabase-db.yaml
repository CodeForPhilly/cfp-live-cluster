apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: squadquest-supabase
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: supabase
    helm.sh/chart: supabase-0.1.3
  name: squadquest-supabase-supabase-db
  namespace: squadquest-supabase
spec:
  selector:
    matchLabels:
      app.kubernetes.io/instance: squadquest-supabase
      app.kubernetes.io/name: supabase-db
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: squadquest-supabase
        app.kubernetes.io/name: supabase-db
    spec:
      containers:
        - env:
            - name: JWT_EXP
              value: '3600'
            - name: PGPORT
              value: '5432'
            - name: POSTGRES_HOST
              value: /var/run/postgresql
            - name: POSTGRES_PORT
              value: '5432'
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  key: username
                  name: postgres
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: postgres
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: postgres
            - name: PGDATABASE
              valueFrom:
                secretKeyRef:
                  key: database
                  name: postgres
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  key: database
                  name: postgres
          image: supabase/postgres:15.6.1.143
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
                - pg_isready
                - '-U'
                - postgres
            initialDelaySeconds: 3
          name: supabase-db
          ports:
            - containerPort: 9999
              name: http
              protocol: TCP
          securityContext: {}
          volumeMounts:
            - mountPath: /docker-entrypoint-initdb.d
              name: initdb-scripts-data
            - mountPath: /var/lib/postgresql/data
              name: postgres-volume
              subPath: postgres-data
      initContainers:
        - args:
            - >
              echo "Copying init scripts into existing image script
              directory..."

              cp -r /docker-entrypoint-initdb.d/* /initdb.d/

              cp /custom-init-scripts/98-webhooks.sql /initdb.d/init-scripts/

              cp /custom-init-scripts/99-roles.sql /initdb.d/init-scripts/

              cp /custom-init-scripts/99-logs.sql /initdb.d/migrations/

              cp /custom-init-scripts/99-realtime.sql /initdb.d/migrations/


              echo "Copying user-defined migration scripts..."

              cp /custom-migrations/* /initdb.d/migrations/ || echo "Skip
              migrations"

              echo "Initialization scripts are ready"
          command:
            - /bin/sh
            - '-c'
          image: supabase/postgres:15.6.1.143
          imagePullPolicy: IfNotPresent
          name: init-db
          volumeMounts:
            - mountPath: /custom-init-scripts
              name: custom-init-scripts
            - mountPath: /custom-migrations
              name: custom-migrations
            - mountPath: /initdb.d
              name: initdb-scripts-data
      securityContext: {}
      serviceAccountName: squadquest-supabase-supabase-db
      volumes:
        - emptyDir:
            medium: ''
          name: initdb-scripts-data
        - configMap:
            name: squadquest-supabase-supabase-db-initdb
          name: custom-init-scripts
        - configMap:
            name: squadquest-supabase-supabase-db-migrations
          name: custom-migrations
        - name: postgres-volume
          persistentVolumeClaim:
            claimName: squadquest-supabase-supabase-db-pvc
